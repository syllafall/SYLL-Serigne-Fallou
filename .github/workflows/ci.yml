name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ENV_TARGET:
        description: 'Environnement cible'
        required: false
        default: 'production'

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' || github.ref != 'refs/tags/*' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  only-canary:
    name: Only Canary
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ENV_TARGET == 'canary' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Echo Only Canary
        run: echo "Hello Only Canary !"

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci

      # Si vous générez du HTML dans le dossier /dist
      - name: Build HTML
        run: npm run build

      # Si vous générez une image Docker (remplacez par vos paramètres spécifiques)
      - name: Build Docker Image
        run: |
          docker build -t my-docker-image .

      # Si vous souhaitez uploader l'artefact HTML
      - name: Upload HTML as artifact
        uses: actions/upload-artifact@v3
        with:
          name: html-artifact
          path: ./dist  # Le dossier contenant les fichiers générés

      # Si vous souhaitez pousser l'image Docker dans un registre
      - name: Push Docker Image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker tag my-docker-image ${{ secrets.DOCKER_USERNAME }}/my-docker-image:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-docker-image:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name != 'push' || github.ref != 'refs/tags/*' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run Integration Test
        run: echo "Hello Integration !"

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run E2E test
        run: echo "Hello E2E !"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: e2e-test
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Release project
        run: echo "Release logic here"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Deploy project
        run: echo "Deploy logic here"
